import { DefaultDomainMeta, DomainMeta, PropertyObject } from '../domain/object/meta';
import { ClassViewApi, NavigableObject, NavigateOptions, RichHTMLElementEventMap, SelectableObject } from './class-view-api';
import { ContentObject } from '../domain/object/content';
import { Duration, OptionalMembers, Pixel, Point, Zoom } from '../domain/base';
import { ClassObject } from '../domain/object/class';

export declare class ClassViewComponent<Meta extends DomainMeta = DefaultDomainMeta> extends window.HTMLElement implements ClassViewApi<Meta> {
    private readonly _converter;
    private readonly _selectedObjects;
    private readonly _contentObject;
    private readonly _zoom;
    private readonly _viewportCenter;
    private readonly _deferredOperationsManager;
    private _animationDuration;
    private _embedLock;
    private _graphView$;
    private _updateScheduled;
    private _forceSync;
    private _likeConvertResult;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    invalidate(): void;
    private internalInvalidate;
    private graphView$;
    private applyChanges;
    private createGraphView;
    private isSomethingDirty;
    private layoutStart;
    private layoutFinish;
    private userSelectionChange;
    private userZoomChange;
    private userViewportCenterChange;
    get content(): ContentObject<Meta>;
    set content(content: ContentObject<Meta>);
    get selectedObjects(): SelectableObject<Meta>[];
    set selectedObjects(selectedObjects: SelectableObject<Meta>[]);
    get viewportCenter(): Point<Pixel>;
    set viewportCenter(center: Point<Pixel>);
    get zoom(): Zoom;
    set zoom(zoom: Zoom);
    get animationDuration(): Duration;
    set animationDuration(durationMs: Duration);
    navigateTo(objects: NavigableObject<Meta>[], options?: OptionalMembers<NavigateOptions>): void;
    get classShapeFunction(): (cl: Meta['class']) => ClassObject<PropertyObject<Meta>>['shape'];
    set classShapeFunction(f: (cl: Meta['class']) => ClassObject<PropertyObject<Meta>>['shape']);
    addEventListener<K extends keyof RichHTMLElementEventMap<Meta>>(type: K, listener: (this: HTMLElement, ev: RichHTMLElementEventMap<Meta>[K]) => any, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof RichHTMLElementEventMap<Meta>>(type: K, listener: (this: HTMLElement, ev: RichHTMLElementEventMap<Meta>[K]) => any, options?: boolean | EventListenerOptions): void;
    private refillByKey;
    private convertDeferredNavigate;
}
